// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "./Parser.fsp"

open Ast

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | INVALID
  | EQUAL
  | NOTEQ
  | LT
  | GT
  | LE
  | GE
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | COMMA
  | LET
  | FN
  | EQ
  | LCUR
  | RCUR
  | LPAR
  | RPAR
  | SEMICOLON
  | INT of (string)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_INVALID
    | TOKEN_EQUAL
    | TOKEN_NOTEQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_ADD
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_COMMA
    | TOKEN_LET
    | TOKEN_FN
    | TOKEN_EQ
    | TOKEN_LCUR
    | TOKEN_RCUR
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_SEMICOLON
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startStatList
    | NONTERM_StatList
    | NONTERM_Statement
    | NONTERM_Args
    | NONTERM_NonEmptyArgs
    | NONTERM_Expr
    | NONTERM_ExprFn
    | NONTERM_ExprCond
    | NONTERM_ExprComp
    | NONTERM_Expr1
    | NONTERM_Expr2
    | NONTERM_Expr3
    | NONTERM_Atom

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | INVALID  -> 1 
  | EQUAL  -> 2 
  | NOTEQ  -> 3 
  | LT  -> 4 
  | GT  -> 5 
  | LE  -> 6 
  | GE  -> 7 
  | ADD  -> 8 
  | SUB  -> 9 
  | MUL  -> 10 
  | DIV  -> 11 
  | MOD  -> 12 
  | COMMA  -> 13 
  | LET  -> 14 
  | FN  -> 15 
  | EQ  -> 16 
  | LCUR  -> 17 
  | RCUR  -> 18 
  | LPAR  -> 19 
  | RPAR  -> 20 
  | SEMICOLON  -> 21 
  | INT _ -> 22 
  | ID _ -> 23 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_INVALID 
  | 2 -> TOKEN_EQUAL 
  | 3 -> TOKEN_NOTEQ 
  | 4 -> TOKEN_LT 
  | 5 -> TOKEN_GT 
  | 6 -> TOKEN_LE 
  | 7 -> TOKEN_GE 
  | 8 -> TOKEN_ADD 
  | 9 -> TOKEN_SUB 
  | 10 -> TOKEN_MUL 
  | 11 -> TOKEN_DIV 
  | 12 -> TOKEN_MOD 
  | 13 -> TOKEN_COMMA 
  | 14 -> TOKEN_LET 
  | 15 -> TOKEN_FN 
  | 16 -> TOKEN_EQ 
  | 17 -> TOKEN_LCUR 
  | 18 -> TOKEN_RCUR 
  | 19 -> TOKEN_LPAR 
  | 20 -> TOKEN_RPAR 
  | 21 -> TOKEN_SEMICOLON 
  | 22 -> TOKEN_INT 
  | 23 -> TOKEN_ID 
  | 26 -> TOKEN_end_of_input
  | 24 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startStatList 
    | 1 -> NONTERM_StatList 
    | 2 -> NONTERM_StatList 
    | 3 -> NONTERM_StatList 
    | 4 -> NONTERM_Statement 
    | 5 -> NONTERM_Statement 
    | 6 -> NONTERM_Args 
    | 7 -> NONTERM_Args 
    | 8 -> NONTERM_NonEmptyArgs 
    | 9 -> NONTERM_NonEmptyArgs 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_ExprFn 
    | 13 -> NONTERM_ExprFn 
    | 14 -> NONTERM_ExprCond 
    | 15 -> NONTERM_ExprCond 
    | 16 -> NONTERM_ExprCond 
    | 17 -> NONTERM_ExprComp 
    | 18 -> NONTERM_ExprComp 
    | 19 -> NONTERM_ExprComp 
    | 20 -> NONTERM_ExprComp 
    | 21 -> NONTERM_ExprComp 
    | 22 -> NONTERM_Expr1 
    | 23 -> NONTERM_Expr1 
    | 24 -> NONTERM_Expr1 
    | 25 -> NONTERM_Expr2 
    | 26 -> NONTERM_Expr2 
    | 27 -> NONTERM_Expr2 
    | 28 -> NONTERM_Expr2 
    | 29 -> NONTERM_Expr3 
    | 30 -> NONTERM_Atom 
    | 31 -> NONTERM_Atom 
    | 32 -> NONTERM_Atom 
    | 33 -> NONTERM_Atom 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 26 
let _fsyacc_tagOfErrorTerminal = 24

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | INVALID  -> "INVALID" 
  | EQUAL  -> "EQUAL" 
  | NOTEQ  -> "NOTEQ" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LE  -> "LE" 
  | GE  -> "GE" 
  | ADD  -> "ADD" 
  | SUB  -> "SUB" 
  | MUL  -> "MUL" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | COMMA  -> "COMMA" 
  | LET  -> "LET" 
  | FN  -> "FN" 
  | EQ  -> "EQ" 
  | LCUR  -> "LCUR" 
  | RCUR  -> "RCUR" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | SEMICOLON  -> "SEMICOLON" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | INVALID  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | SUB  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LCUR  -> (null : System.Object) 
  | RCUR  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 3us; 65535us; 0us; 1us; 3us; 4us; 21us; 22us; 3us; 65535us; 0us; 3us; 3us; 3us; 21us; 3us; 2us; 65535us; 18us; 19us; 55us; 56us; 3us; 65535us; 12us; 13us; 18us; 10us; 55us; 10us; 4us; 65535us; 0us; 5us; 3us; 5us; 7us; 8us; 21us; 5us; 19us; 65535us; 0us; 16us; 3us; 16us; 7us; 16us; 12us; 11us; 14us; 15us; 18us; 11us; 21us; 16us; 28us; 54us; 29us; 54us; 35us; 54us; 36us; 54us; 37us; 54us; 38us; 54us; 39us; 54us; 41us; 54us; 44us; 54us; 46us; 54us; 48us; 54us; 55us; 11us; 19us; 65535us; 0us; 24us; 3us; 24us; 7us; 24us; 12us; 24us; 14us; 24us; 18us; 24us; 21us; 24us; 28us; 24us; 29us; 24us; 35us; 24us; 36us; 24us; 37us; 24us; 38us; 24us; 39us; 24us; 41us; 24us; 44us; 24us; 46us; 24us; 48us; 24us; 55us; 24us; 19us; 65535us; 0us; 27us; 3us; 27us; 7us; 27us; 12us; 27us; 14us; 27us; 18us; 27us; 21us; 27us; 28us; 25us; 29us; 26us; 35us; 27us; 36us; 27us; 37us; 27us; 38us; 27us; 39us; 27us; 41us; 27us; 44us; 27us; 46us; 27us; 48us; 27us; 55us; 27us; 19us; 65535us; 0us; 34us; 3us; 34us; 7us; 34us; 12us; 34us; 14us; 34us; 18us; 34us; 21us; 34us; 28us; 34us; 29us; 34us; 35us; 30us; 36us; 31us; 37us; 32us; 38us; 33us; 39us; 34us; 41us; 34us; 44us; 34us; 46us; 34us; 48us; 34us; 55us; 34us; 19us; 65535us; 0us; 43us; 3us; 43us; 7us; 43us; 12us; 43us; 14us; 43us; 18us; 43us; 21us; 43us; 28us; 43us; 29us; 43us; 35us; 43us; 36us; 43us; 37us; 43us; 38us; 43us; 39us; 40us; 41us; 42us; 44us; 43us; 46us; 43us; 48us; 43us; 55us; 43us; 19us; 65535us; 0us; 50us; 3us; 50us; 7us; 50us; 12us; 50us; 14us; 50us; 18us; 50us; 21us; 50us; 28us; 50us; 29us; 50us; 35us; 50us; 36us; 50us; 37us; 50us; 38us; 50us; 39us; 50us; 41us; 50us; 44us; 45us; 46us; 47us; 48us; 49us; 55us; 50us; 19us; 65535us; 0us; 51us; 3us; 51us; 7us; 51us; 12us; 51us; 14us; 51us; 18us; 51us; 21us; 51us; 28us; 51us; 29us; 51us; 35us; 51us; 36us; 51us; 37us; 51us; 38us; 51us; 39us; 51us; 41us; 51us; 44us; 51us; 46us; 51us; 48us; 51us; 55us; 51us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 5us; 9us; 12us; 16us; 21us; 41us; 61us; 81us; 101us; 121us; 141us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 2us; 1us; 3us; 1us; 3us; 2us; 4us; 10us; 1us; 4us; 1us; 5us; 2us; 5us; 10us; 1us; 5us; 1us; 7us; 3us; 8us; 9us; 32us; 1us; 9us; 1us; 9us; 1us; 10us; 2us; 10us; 32us; 2us; 11us; 32us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 4us; 14us; 14us; 15us; 16us; 4us; 14us; 15us; 15us; 16us; 3us; 14us; 15us; 16us; 1us; 14us; 1us; 15us; 8us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 8us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 8us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 8us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 7us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 22us; 5us; 22us; 24us; 25us; 26us; 27us; 1us; 23us; 5us; 23us; 24us; 25us; 26us; 27us; 4us; 24us; 25us; 26us; 27us; 1us; 25us; 2us; 25us; 28us; 1us; 26us; 2us; 26us; 28us; 1us; 27us; 2us; 27us; 28us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 13us; 15us; 17us; 20us; 22us; 24us; 28us; 30us; 32us; 34us; 37us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 61us; 66us; 70us; 72us; 74us; 83us; 92us; 101us; 110us; 118us; 120us; 122us; 124us; 126us; 128us; 134us; 136us; 142us; 147us; 149us; 152us; 154us; 157us; 159us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; |]
let _fsyacc_action_rows = 59
let _fsyacc_actionTableElements = [|6us; 16385us; 0us; 2us; 1us; 58us; 14us; 7us; 15us; 17us; 22us; 52us; 23us; 53us; 0us; 49152us; 0us; 16386us; 6us; 16385us; 0us; 2us; 1us; 58us; 14us; 7us; 15us; 17us; 22us; 52us; 23us; 53us; 0us; 16387us; 2us; 32768us; 16us; 14us; 21us; 6us; 0us; 16388us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 2us; 32768us; 16us; 14us; 21us; 9us; 0us; 16389us; 0us; 16391us; 2us; 16392us; 13us; 12us; 19us; 55us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 0us; 16393us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 1us; 16394us; 19us; 55us; 1us; 16395us; 19us; 55us; 1us; 32768us; 19us; 18us; 4us; 16390us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 1us; 32768us; 20us; 20us; 1us; 32768us; 17us; 21us; 6us; 16385us; 0us; 2us; 1us; 58us; 14us; 7us; 15us; 17us; 22us; 52us; 23us; 53us; 1us; 32768us; 18us; 23us; 0us; 16396us; 0us; 16397us; 2us; 16398us; 2us; 28us; 3us; 29us; 2us; 16399us; 2us; 28us; 3us; 29us; 2us; 16400us; 2us; 28us; 3us; 29us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 6us; 16401us; 4us; 35us; 5us; 36us; 6us; 37us; 7us; 38us; 8us; 39us; 9us; 41us; 6us; 16402us; 4us; 35us; 5us; 36us; 6us; 37us; 7us; 38us; 8us; 39us; 9us; 41us; 6us; 16403us; 4us; 35us; 5us; 36us; 6us; 37us; 7us; 38us; 8us; 39us; 9us; 41us; 6us; 16404us; 4us; 35us; 5us; 36us; 6us; 37us; 7us; 38us; 8us; 39us; 9us; 41us; 6us; 16405us; 4us; 35us; 5us; 36us; 6us; 37us; 7us; 38us; 8us; 39us; 9us; 41us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 3us; 16406us; 10us; 44us; 11us; 46us; 12us; 48us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 3us; 16407us; 10us; 44us; 11us; 46us; 12us; 48us; 3us; 16408us; 10us; 44us; 11us; 46us; 12us; 48us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 0us; 16409us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 0us; 16410us; 4us; 32768us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 1us; 32768us; 19us; 55us; 4us; 16390us; 1us; 58us; 15us; 17us; 22us; 52us; 23us; 53us; 1us; 32768us; 20us; 57us; 0us; 16416us; 0us; 16417us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 7us; 8us; 9us; 16us; 17us; 20us; 21us; 26us; 29us; 30us; 31us; 34us; 39us; 40us; 45us; 47us; 49us; 51us; 56us; 58us; 60us; 67us; 69us; 70us; 71us; 74us; 77us; 80us; 85us; 90us; 97us; 104us; 111us; 118us; 125us; 130us; 135us; 140us; 145us; 150us; 154us; 159us; 163us; 167us; 172us; 173us; 178us; 179us; 184us; 185us; 186us; 187us; 188us; 189us; 191us; 196us; 198us; 199us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 0us; 1us; 2us; 2us; 3us; 0us; 1us; 1us; 3us; 3us; 1us; 7us; 1us; 3us; 3us; 1us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 4us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 11us; 12us; 12us; 12us; 12us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16386us; 65535us; 16387us; 65535us; 16388us; 65535us; 65535us; 16389us; 16391us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 16413us; 16414us; 16415us; 65535us; 65535us; 65535us; 16416us; 16417us; |]
let _fsyacc_reductions ()  =    [| 
# 248 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Stat list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startStatList));
# 257 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "./Parser.fsp"
                             [] 
                   )
# 36 "./Parser.fsp"
                 : Stat list));
# 267 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "./Parser.fsp"
                             [] 
                   )
# 37 "./Parser.fsp"
                 : Stat list));
# 277 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Stat in
            let _2 = parseState.GetInput(2) :?> Stat list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "./Parser.fsp"
                                            _1 :: _2 
                   )
# 38 "./Parser.fsp"
                 : Stat list));
# 289 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "./Parser.fsp"
                                            Expr( _1 ) 
                   )
# 41 "./Parser.fsp"
                 : Stat));
# 300 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "./Parser.fsp"
                                            Let( _2 ) 
                   )
# 42 "./Parser.fsp"
                 : Stat));
# 311 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "./Parser.fsp"
                                      [] 
                   )
# 45 "./Parser.fsp"
                 : Expr list));
# 321 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "./Parser.fsp"
                                      _1 
                   )
# 46 "./Parser.fsp"
                 : Expr list));
# 332 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "./Parser.fsp"
                                                   [ _1 ] 
                   )
# 49 "./Parser.fsp"
                 : Expr list));
# 343 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "./Parser.fsp"
                                                   _1 :: _3 
                   )
# 50 "./Parser.fsp"
                 : Expr list));
# 355 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "./Parser.fsp"
                                        Binary( _1, Assign, _3 ) 
                   )
# 53 "./Parser.fsp"
                 : Expr));
# 367 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "./Parser.fsp"
                                        _1 
                   )
# 54 "./Parser.fsp"
                 : Expr));
# 378 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> Expr list in
            let _6 = parseState.GetInput(6) :?> Stat list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "./Parser.fsp"
                                                              Function( _3, _6 ) 
                   )
# 57 "./Parser.fsp"
                 : Expr));
# 390 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprCond in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "./Parser.fsp"
                                  _1 
                   )
# 58 "./Parser.fsp"
                 : Expr));
# 401 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprComp in
            let _3 = parseState.GetInput(3) :?> 'gentype_ExprComp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "./Parser.fsp"
                                                 Binary( _1, Equal,    _3 ) 
                   )
# 61 "./Parser.fsp"
                 : 'gentype_ExprCond));
# 413 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprComp in
            let _3 = parseState.GetInput(3) :?> 'gentype_ExprComp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "./Parser.fsp"
                                                 Binary( _1, NotEqual, _3 ) 
                   )
# 62 "./Parser.fsp"
                 : 'gentype_ExprCond));
# 425 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ExprComp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "./Parser.fsp"
                                                 _1 
                   )
# 63 "./Parser.fsp"
                 : 'gentype_ExprCond));
# 436 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "./Parser.fsp"
                                        Binary( _1, LessThan,       _3 ) 
                   )
# 66 "./Parser.fsp"
                 : 'gentype_ExprComp));
# 448 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "./Parser.fsp"
                                        Binary( _1, LessOrEqual,    _3 ) 
                   )
# 67 "./Parser.fsp"
                 : 'gentype_ExprComp));
# 460 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "./Parser.fsp"
                                        Binary( _1, GreaterThan,    _3 ) 
                   )
# 68 "./Parser.fsp"
                 : 'gentype_ExprComp));
# 472 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "./Parser.fsp"
                                        Binary( _1, GreaterOrEqual, _3 ) 
                   )
# 69 "./Parser.fsp"
                 : 'gentype_ExprComp));
# 484 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "./Parser.fsp"
                               _1 
                   )
# 70 "./Parser.fsp"
                 : 'gentype_ExprComp));
# 495 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "./Parser.fsp"
                                         Binary( _1, Add, _3 ) 
                   )
# 73 "./Parser.fsp"
                 : Expr));
# 507 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "./Parser.fsp"
                                         Binary( _1, Sub, _3 ) 
                   )
# 74 "./Parser.fsp"
                 : Expr));
# 519 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "./Parser.fsp"
                                         _1 
                   )
# 75 "./Parser.fsp"
                 : Expr));
# 530 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "./Parser.fsp"
                                         Binary( _1, Mul, _3 ) 
                   )
# 78 "./Parser.fsp"
                 : Expr));
# 542 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "./Parser.fsp"
                                         Binary( _1, Div, _3 ) 
                   )
# 79 "./Parser.fsp"
                 : Expr));
# 554 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "./Parser.fsp"
                                         Binary( _1, Mod, _3 ) 
                   )
# 80 "./Parser.fsp"
                 : Expr));
# 566 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "./Parser.fsp"
                                         _1 
                   )
# 81 "./Parser.fsp"
                 : Expr));
# 577 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "./Parser.fsp"
                                   _1 
                   )
# 83 "./Parser.fsp"
                 : Expr));
# 588 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "./Parser.fsp"
                             Integer( _1 |> int ) 
                   )
# 86 "./Parser.fsp"
                 : Expr));
# 599 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "./Parser.fsp"
                             Identifier( _1 ) 
                   )
# 87 "./Parser.fsp"
                 : Expr));
# 610 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Expr in
            let _3 = parseState.GetInput(3) :?> Expr list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "./Parser.fsp"
                                               FuncCall( _1, _3 ) 
                   )
# 88 "./Parser.fsp"
                 : Expr));
# 622 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "./Parser.fsp"
                                 Error 
                   )
# 89 "./Parser.fsp"
                 : Expr));
|]
# 633 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 27;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let StatList lexer lexbuf : Stat list =
    engine lexer lexbuf 0 :?> _
