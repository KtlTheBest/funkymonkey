// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | INVALID
  | TrueTok
  | FalseTok
  | NullTok
  | EQUAL
  | NOTEQ
  | LT
  | GT
  | LE
  | GE
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | COMMA
  | LET
  | FN
  | EQ
  | LSQR
  | RSQR
  | LCUR
  | RCUR
  | LPAR
  | RPAR
  | SEMICOLON
  | STR of (string)
  | INT of (string)
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_INVALID
    | TOKEN_TrueTok
    | TOKEN_FalseTok
    | TOKEN_NullTok
    | TOKEN_EQUAL
    | TOKEN_NOTEQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_ADD
    | TOKEN_SUB
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_COMMA
    | TOKEN_LET
    | TOKEN_FN
    | TOKEN_EQ
    | TOKEN_LSQR
    | TOKEN_RSQR
    | TOKEN_LCUR
    | TOKEN_RCUR
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_SEMICOLON
    | TOKEN_STR
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startStatList
    | NONTERM_StatList
    | NONTERM_Statement
    | NONTERM_Args
    | NONTERM_NonEmptyArgs
    | NONTERM_Expr
    | NONTERM_ExprFn
    | NONTERM_ExprCond
    | NONTERM_ExprComp
    | NONTERM_Expr1
    | NONTERM_Expr2
    | NONTERM_Expr3
    | NONTERM_Atom
    | NONTERM_PrimitiveTok
    | NONTERM_BoolValueTok
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val StatList : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Stat list) 
